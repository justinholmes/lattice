// This file was generated by counterfeiter
package fake_cf_ignore

import (
	"io"
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/droplet_runner/command_factory/cf_ignore"
)

type FakeCFIgnore struct {
	ParseStub        func(ignored io.Reader) error
	parseMutex       sync.RWMutex
	parseArgsForCall []struct {
		ignored io.Reader
	}
	parseReturns struct {
		result1 error
	}
	ShouldIgnoreStub        func(path string) bool
	shouldIgnoreMutex       sync.RWMutex
	shouldIgnoreArgsForCall []struct {
		path string
	}
	shouldIgnoreReturns struct {
		result1 bool
	}
}

func (fake *FakeCFIgnore) Parse(ignored io.Reader) error {
	fake.parseMutex.Lock()
	fake.parseArgsForCall = append(fake.parseArgsForCall, struct {
		ignored io.Reader
	}{ignored})
	fake.parseMutex.Unlock()
	if fake.ParseStub != nil {
		return fake.ParseStub(ignored)
	} else {
		return fake.parseReturns.result1
	}
}

func (fake *FakeCFIgnore) ParseCallCount() int {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	return len(fake.parseArgsForCall)
}

func (fake *FakeCFIgnore) ParseArgsForCall(i int) io.Reader {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	return fake.parseArgsForCall[i].ignored
}

func (fake *FakeCFIgnore) ParseReturns(result1 error) {
	fake.ParseStub = nil
	fake.parseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFIgnore) ShouldIgnore(path string) bool {
	fake.shouldIgnoreMutex.Lock()
	fake.shouldIgnoreArgsForCall = append(fake.shouldIgnoreArgsForCall, struct {
		path string
	}{path})
	fake.shouldIgnoreMutex.Unlock()
	if fake.ShouldIgnoreStub != nil {
		return fake.ShouldIgnoreStub(path)
	} else {
		return fake.shouldIgnoreReturns.result1
	}
}

func (fake *FakeCFIgnore) ShouldIgnoreCallCount() int {
	fake.shouldIgnoreMutex.RLock()
	defer fake.shouldIgnoreMutex.RUnlock()
	return len(fake.shouldIgnoreArgsForCall)
}

func (fake *FakeCFIgnore) ShouldIgnoreArgsForCall(i int) string {
	fake.shouldIgnoreMutex.RLock()
	defer fake.shouldIgnoreMutex.RUnlock()
	return fake.shouldIgnoreArgsForCall[i].path
}

func (fake *FakeCFIgnore) ShouldIgnoreReturns(result1 bool) {
	fake.ShouldIgnoreStub = nil
	fake.shouldIgnoreReturns = struct {
		result1 bool
	}{result1}
}

var _ cf_ignore.CFIgnore = new(FakeCFIgnore)
