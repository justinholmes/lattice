// This file was generated by counterfeiter
package fake_docker_session

import (
	"sync"

	"github.com/cloudfoundry-incubator/lattice/ltc/docker_runner/docker_metadata_fetcher"
)

type FakeDockerSessionFactory struct {
	MakeSessionStub        func(reposName string, allowInsecure bool) (docker_metadata_fetcher.DockerSession, error)
	makeSessionMutex       sync.RWMutex
	makeSessionArgsForCall []struct {
		reposName     string
		allowInsecure bool
	}
	makeSessionReturns struct {
		result1 docker_metadata_fetcher.DockerSession
		result2 error
	}
}

func (fake *FakeDockerSessionFactory) MakeSession(reposName string, allowInsecure bool) (docker_metadata_fetcher.DockerSession, error) {
	fake.makeSessionMutex.Lock()
	fake.makeSessionArgsForCall = append(fake.makeSessionArgsForCall, struct {
		reposName     string
		allowInsecure bool
	}{reposName, allowInsecure})
	fake.makeSessionMutex.Unlock()
	if fake.MakeSessionStub != nil {
		return fake.MakeSessionStub(reposName, allowInsecure)
	} else {
		return fake.makeSessionReturns.result1, fake.makeSessionReturns.result2
	}
}

func (fake *FakeDockerSessionFactory) MakeSessionCallCount() int {
	fake.makeSessionMutex.RLock()
	defer fake.makeSessionMutex.RUnlock()
	return len(fake.makeSessionArgsForCall)
}

func (fake *FakeDockerSessionFactory) MakeSessionArgsForCall(i int) (string, bool) {
	fake.makeSessionMutex.RLock()
	defer fake.makeSessionMutex.RUnlock()
	return fake.makeSessionArgsForCall[i].reposName, fake.makeSessionArgsForCall[i].allowInsecure
}

func (fake *FakeDockerSessionFactory) MakeSessionReturns(result1 docker_metadata_fetcher.DockerSession, result2 error) {
	fake.MakeSessionStub = nil
	fake.makeSessionReturns = struct {
		result1 docker_metadata_fetcher.DockerSession
		result2 error
	}{result1, result2}
}

var _ docker_metadata_fetcher.DockerSessionFactory = new(FakeDockerSessionFactory)
